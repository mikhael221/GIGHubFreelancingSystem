// <auto-generated />
using System;
using Freelancing.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Freelancing.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250826111910_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Freelancing.Models.Entities.Bidding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("BiddingAcceptedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Budget")
                        .HasColumnType("int");

                    b.Property<string>("Delivery")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("bit");

                    b.Property<string>("PreviousWorksPaths")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Proposal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RepositoryLinks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId", "ProjectId")
                        .IsUnique();

                    b.ToTable("Biddings");
                });

            modelBuilder.Entity("Freelancing.Models.Entities.ChatFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<Guid>("MessageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OriginalFileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("StoredFileName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MessageId");

                    b.ToTable("ChatFiles");
                });

            modelBuilder.Entity("Freelancing.Models.Entities.ChatMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ChatRoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("FileType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("MessageType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ChatRoomId");

                    b.HasIndex("IsRead");

                    b.HasIndex("SenderId");

                    b.HasIndex("SentAt");

                    b.ToTable("ChatMessages");
                });

            modelBuilder.Entity("Freelancing.Models.Entities.ChatRoom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastActivityAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("MentorshipMatchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RoomType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("User1Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("User2Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("LastActivityAt");

                    b.HasIndex("MentorshipMatchId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("User2Id");

                    b.HasIndex("User1Id", "User2Id");

                    b.ToTable("ChatRooms");
                });

            modelBuilder.Entity("Freelancing.Models.Entities.Contract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BiddingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClientIPAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ClientMarkedCompleteAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ClientSignatureData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientSignatureType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ClientSignedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ClientUserAgent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ContractContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContractTemplateUsed")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContractTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("DeliverableRequirements")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("DocumentSize")
                        .HasColumnType("bigint");

                    b.Property<string>("FreelancerIPAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FreelancerMarkedCompleteAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FreelancerSignatureData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FreelancerSignatureType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FreelancerSignedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FreelancerUserAgent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentTerms")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RevisionPolicy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("TerminatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Timeline")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BiddingId");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("ProjectId")
                        .IsUnique();

                    b.HasIndex("Status");

                    b.ToTable("Contracts");
                });

            modelBuilder.Entity("Freelancing.Models.Entities.ContractAuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ContractId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IPAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NewStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PreviousStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("UserAgent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.HasIndex("Timestamp");

                    b.HasIndex("UserId");

                    b.ToTable("ContractAuditLogs");
                });

            modelBuilder.Entity("Freelancing.Models.Entities.ContractRevision", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ContractId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CurrentHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PreviousHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RevisionContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RevisionNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RevisionNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ContractId", "RevisionNumber")
                        .IsUnique();

                    b.ToTable("ContractRevisions");
                });

            modelBuilder.Entity("Freelancing.Models.Entities.ContractTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PreviewImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TemplateContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TemplateVersion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UsageCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Category");

                    b.HasIndex("IsActive");

                    b.ToTable("ContractTemplates");
                });

            modelBuilder.Entity("Freelancing.Models.Entities.ContractTermination", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClientIPAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientSignatureData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientSignatureType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ClientSignedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ClientUserAgent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ContractId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DocumentHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("DocumentSize")
                        .HasColumnType("bigint");

                    b.Property<decimal>("FinalPayment")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("FreelancerIPAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FreelancerSignatureData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FreelancerSignatureType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FreelancerSignedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FreelancerUserAgent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RequestedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<Guid>("RequestedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RequestedByUserRole")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SettlementDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SettlementNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TerminationDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TerminationReason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TerminationTerms")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.HasIndex("RequestedAt");

                    b.HasIndex("RequestedByUserId");

                    b.HasIndex("Status");

                    b.ToTable("ContractTerminations");
                });

            modelBuilder.Entity("Freelancing.Models.Entities.ContractTerminationAuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ContractTerminationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IPAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("UserAgent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ContractTerminationId");

                    b.HasIndex("Timestamp");

                    b.HasIndex("UserId");

                    b.ToTable("ContractTerminationAuditLogs");
                });

            modelBuilder.Entity("Freelancing.Models.Entities.Deliverable", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ContractId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PreviousVersionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RepositoryLinks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReviewComments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReviewedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ReviewedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("SubmittedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<Guid>("SubmittedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SubmittedFilesPaths")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.HasIndex("PreviousVersionId");

                    b.HasIndex("ReviewedByUserId");

                    b.HasIndex("Status");

                    b.HasIndex("SubmittedAt");

                    b.HasIndex("SubmittedByUserId");

                    b.ToTable("Deliverables");
                });

            modelBuilder.Entity("Freelancing.Models.Entities.FreelancerFeedback", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AcceptBidId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comments")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<Guid>("FreelancerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<bool>("WouldRecommend")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AcceptBidId")
                        .IsUnique();

                    b.HasIndex("CreatedAt");

                    b.HasIndex("FreelancerId");

                    b.ToTable("FreelancerFeedbacks");
                });

            modelBuilder.Entity("Freelancing.Models.Entities.Goal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("GoalDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GoalName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IconSvg")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Goals");
                });

            modelBuilder.Entity("Freelancing.Models.Entities.IdentityVerification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AwsRekognitionResponse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AwsTextractResponse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EncryptedFaceImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EncryptedIdDocumentImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EncryptedIdDocumentNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EncryptionMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("FaceConfidence")
                        .HasColumnType("real");

                    b.Property<string>("FaceImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("FaceVerified")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("IdDocumentExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IdDocumentImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdDocumentNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdDocumentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IdDocumentVerified")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEncrypted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("RejectedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("RejectionReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("VerificationType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("VerifiedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("UserAccountId");

                    b.ToTable("IdentityVerifications");
                });

            modelBuilder.Entity("Freelancing.Models.Entities.MentorReview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AreasForImprovement")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Comments")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<Guid>("MenteeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MentorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MentorshipMatchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("Strengths")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("WouldRecommend")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("MenteeId");

                    b.HasIndex("MentorId");

                    b.HasIndex("MentorshipMatchId")
                        .IsUnique();

                    b.ToTable("MentorReviews");
                });

            modelBuilder.Entity("Freelancing.Models.Entities.MentorshipChatFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<Guid>("MessageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OriginalFileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("StoredFileName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("UploadedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("Id");

                    b.HasIndex("MessageId");

                    b.ToTable("MentorshipChatFiles");
                });

            modelBuilder.Entity("Freelancing.Models.Entities.MentorshipChatMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("FileType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<Guid>("MentorshipMatchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("MessageType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("SentAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("Id");

                    b.HasIndex("MentorshipMatchId");

                    b.HasIndex("SenderId");

                    b.HasIndex("SentAt");

                    b.HasIndex("MentorshipMatchId", "SentAt");

                    b.ToTable("MentorshipChatMessages");
                });

            modelBuilder.Entity("Freelancing.Models.Entities.MentorshipGoalCompletion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CompletedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<Guid>("CompletedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompletionType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid>("GoalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsCompletedByMentee")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCompletedByMentor")
                        .HasColumnType("bit");

                    b.Property<Guid>("MentorshipMatchId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CompletedAt");

                    b.HasIndex("CompletedByUserId");

                    b.HasIndex("GoalId");

                    b.HasIndex("MentorshipMatchId", "GoalId");

                    b.ToTable("MentorshipGoalCompletions");
                });

            modelBuilder.Entity("Freelancing.Models.Entities.MentorshipMatch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeclinedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("MatchedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MenteeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MenteeMentorshipId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MentorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MentorMentorshipId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("MatchedDate");

                    b.HasIndex("MenteeId");

                    b.HasIndex("MenteeMentorshipId");

                    b.HasIndex("MentorMentorshipId");

                    b.HasIndex("Status");

                    b.HasIndex("MentorId", "MenteeId")
                        .IsUnique();

                    b.ToTable("MentorshipMatches");
                });

            modelBuilder.Entity("Freelancing.Models.Entities.MentorshipSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MentorshipMatchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Notes")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime>("ScheduledStartUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("TimeZone")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Title")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MentorshipMatchId");

                    b.ToTable("MentorshipSessions");
                });

            modelBuilder.Entity("Freelancing.Models.Entities.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("EncryptedMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EncryptedTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EncryptionMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IconSvg")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEncrypted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("RelatedUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("IsRead");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Freelancing.Models.Entities.PeerMentorship", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("PeerMentorships");
                });

            modelBuilder.Entity("Freelancing.Models.Entities.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AcceptedBidId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Budget")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImagePaths")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AcceptedBidId");

                    b.HasIndex("UserId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("Freelancing.Models.Entities.ProjectSkill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserSkillId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserSkillId");

                    b.HasIndex("ProjectId", "UserSkillId")
                        .IsUnique();

                    b.ToTable("ProjectSkills");
                });

            modelBuilder.Entity("Freelancing.Models.Entities.UserAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("MentorshipId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("UserAccounts");
                });

            modelBuilder.Entity("Freelancing.Models.Entities.UserAccountSkill", b =>
                {
                    b.Property<Guid>("UserAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserSkillId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserAccountId", "UserSkillId");

                    b.HasIndex("UserSkillId");

                    b.ToTable("UserAccountSkills");
                });

            modelBuilder.Entity("Freelancing.Models.Entities.UserSkill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserSkills");
                });

            modelBuilder.Entity("Freelancing.Services.HiringOutcome", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FreelancerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("RecordedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<bool>("WasSuccessful")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("FreelancerId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("RecordedAt");

                    b.ToTable("HiringOutcomes");
                });

            modelBuilder.Entity("Freelancing.Models.Entities.Bidding", b =>
                {
                    b.HasOne("Freelancing.Models.Entities.Project", "Project")
                        .WithMany("Biddings")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Freelancing.Models.Entities.UserAccount", "User")
                        .WithMany("Biddings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Freelancing.Models.Entities.ChatFile", b =>
                {
                    b.HasOne("Freelancing.Models.Entities.ChatMessage", "Message")
                        .WithMany()
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Message");
                });

            modelBuilder.Entity("Freelancing.Models.Entities.ChatMessage", b =>
                {
                    b.HasOne("Freelancing.Models.Entities.ChatRoom", "ChatRoom")
                        .WithMany("Messages")
                        .HasForeignKey("ChatRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Freelancing.Models.Entities.UserAccount", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ChatRoom");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Freelancing.Models.Entities.ChatRoom", b =>
                {
                    b.HasOne("Freelancing.Models.Entities.MentorshipMatch", "MentorshipMatch")
                        .WithMany()
                        .HasForeignKey("MentorshipMatchId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Freelancing.Models.Entities.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Freelancing.Models.Entities.UserAccount", "User1")
                        .WithMany()
                        .HasForeignKey("User1Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Freelancing.Models.Entities.UserAccount", "User2")
                        .WithMany()
                        .HasForeignKey("User2Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("MentorshipMatch");

                    b.Navigation("Project");

                    b.Navigation("User1");

                    b.Navigation("User2");
                });

            modelBuilder.Entity("Freelancing.Models.Entities.Contract", b =>
                {
                    b.HasOne("Freelancing.Models.Entities.Bidding", "Bidding")
                        .WithMany()
                        .HasForeignKey("BiddingId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Freelancing.Models.Entities.Project", "Project")
                        .WithOne("Contract")
                        .HasForeignKey("Freelancing.Models.Entities.Contract", "ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bidding");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Freelancing.Models.Entities.ContractAuditLog", b =>
                {
                    b.HasOne("Freelancing.Models.Entities.Contract", "Contract")
                        .WithMany("AuditLogs")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Freelancing.Models.Entities.UserAccount", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Contract");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Freelancing.Models.Entities.ContractRevision", b =>
                {
                    b.HasOne("Freelancing.Models.Entities.Contract", "Contract")
                        .WithMany("Revisions")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Freelancing.Models.Entities.UserAccount", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Contract");

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("Freelancing.Models.Entities.ContractTermination", b =>
                {
                    b.HasOne("Freelancing.Models.Entities.Contract", "Contract")
                        .WithMany()
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contract");
                });

            modelBuilder.Entity("Freelancing.Models.Entities.ContractTerminationAuditLog", b =>
                {
                    b.HasOne("Freelancing.Models.Entities.ContractTermination", "ContractTermination")
                        .WithMany("AuditLogs")
                        .HasForeignKey("ContractTerminationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Freelancing.Models.Entities.UserAccount", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ContractTermination");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Freelancing.Models.Entities.Deliverable", b =>
                {
                    b.HasOne("Freelancing.Models.Entities.Contract", "Contract")
                        .WithMany()
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Freelancing.Models.Entities.Deliverable", "PreviousVersion")
                        .WithMany()
                        .HasForeignKey("PreviousVersionId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Freelancing.Models.Entities.UserAccount", "ReviewedByUser")
                        .WithMany()
                        .HasForeignKey("ReviewedByUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Freelancing.Models.Entities.UserAccount", "SubmittedByUser")
                        .WithMany()
                        .HasForeignKey("SubmittedByUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Contract");

                    b.Navigation("PreviousVersion");

                    b.Navigation("ReviewedByUser");

                    b.Navigation("SubmittedByUser");
                });

            modelBuilder.Entity("Freelancing.Models.Entities.FreelancerFeedback", b =>
                {
                    b.HasOne("Freelancing.Models.Entities.Bidding", "AcceptBidding")
                        .WithMany()
                        .HasForeignKey("AcceptBidId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Freelancing.Models.Entities.UserAccount", "Freelancer")
                        .WithMany()
                        .HasForeignKey("FreelancerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AcceptBidding");

                    b.Navigation("Freelancer");
                });

            modelBuilder.Entity("Freelancing.Models.Entities.IdentityVerification", b =>
                {
                    b.HasOne("Freelancing.Models.Entities.UserAccount", "UserAccount")
                        .WithMany()
                        .HasForeignKey("UserAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("Freelancing.Models.Entities.MentorReview", b =>
                {
                    b.HasOne("Freelancing.Models.Entities.UserAccount", "Mentee")
                        .WithMany()
                        .HasForeignKey("MenteeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Freelancing.Models.Entities.UserAccount", "Mentor")
                        .WithMany()
                        .HasForeignKey("MentorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Freelancing.Models.Entities.MentorshipMatch", "MentorshipMatch")
                        .WithMany()
                        .HasForeignKey("MentorshipMatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mentee");

                    b.Navigation("Mentor");

                    b.Navigation("MentorshipMatch");
                });

            modelBuilder.Entity("Freelancing.Models.Entities.MentorshipChatFile", b =>
                {
                    b.HasOne("Freelancing.Models.Entities.MentorshipChatMessage", "Message")
                        .WithMany()
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Message");
                });

            modelBuilder.Entity("Freelancing.Models.Entities.MentorshipChatMessage", b =>
                {
                    b.HasOne("Freelancing.Models.Entities.MentorshipMatch", "MentorshipMatch")
                        .WithMany()
                        .HasForeignKey("MentorshipMatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Freelancing.Models.Entities.UserAccount", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("MentorshipMatch");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Freelancing.Models.Entities.MentorshipGoalCompletion", b =>
                {
                    b.HasOne("Freelancing.Models.Entities.UserAccount", "CompletedByUser")
                        .WithMany()
                        .HasForeignKey("CompletedByUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Freelancing.Models.Entities.Goal", "Goal")
                        .WithMany()
                        .HasForeignKey("GoalId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Freelancing.Models.Entities.MentorshipMatch", "MentorshipMatch")
                        .WithMany()
                        .HasForeignKey("MentorshipMatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompletedByUser");

                    b.Navigation("Goal");

                    b.Navigation("MentorshipMatch");
                });

            modelBuilder.Entity("Freelancing.Models.Entities.MentorshipMatch", b =>
                {
                    b.HasOne("Freelancing.Models.Entities.UserAccount", "Mentee")
                        .WithMany()
                        .HasForeignKey("MenteeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Freelancing.Models.Entities.PeerMentorship", "MenteeMentorship")
                        .WithMany()
                        .HasForeignKey("MenteeMentorshipId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Freelancing.Models.Entities.UserAccount", "Mentor")
                        .WithMany()
                        .HasForeignKey("MentorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Freelancing.Models.Entities.PeerMentorship", "MentorMentorship")
                        .WithMany()
                        .HasForeignKey("MentorMentorshipId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Mentee");

                    b.Navigation("MenteeMentorship");

                    b.Navigation("Mentor");

                    b.Navigation("MentorMentorship");
                });

            modelBuilder.Entity("Freelancing.Models.Entities.MentorshipSession", b =>
                {
                    b.HasOne("Freelancing.Models.Entities.MentorshipMatch", "MentorshipMatch")
                        .WithMany()
                        .HasForeignKey("MentorshipMatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MentorshipMatch");
                });

            modelBuilder.Entity("Freelancing.Models.Entities.Notification", b =>
                {
                    b.HasOne("Freelancing.Models.Entities.UserAccount", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Freelancing.Models.Entities.PeerMentorship", b =>
                {
                    b.HasOne("Freelancing.Models.Entities.UserAccount", "User")
                        .WithOne("Mentorship")
                        .HasForeignKey("Freelancing.Models.Entities.PeerMentorship", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Freelancing.Models.Entities.Project", b =>
                {
                    b.HasOne("Freelancing.Models.Entities.Bidding", "AcceptedBid")
                        .WithMany()
                        .HasForeignKey("AcceptedBidId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Freelancing.Models.Entities.UserAccount", "User")
                        .WithMany("Projects")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AcceptedBid");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Freelancing.Models.Entities.ProjectSkill", b =>
                {
                    b.HasOne("Freelancing.Models.Entities.Project", "Project")
                        .WithMany("ProjectSkills")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Freelancing.Models.Entities.UserSkill", "UserSkill")
                        .WithMany()
                        .HasForeignKey("UserSkillId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("UserSkill");
                });

            modelBuilder.Entity("Freelancing.Models.Entities.UserAccountSkill", b =>
                {
                    b.HasOne("Freelancing.Models.Entities.UserAccount", "UserAccount")
                        .WithMany("UserAccountSkills")
                        .HasForeignKey("UserAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Freelancing.Models.Entities.UserSkill", "UserSkill")
                        .WithMany()
                        .HasForeignKey("UserSkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserAccount");

                    b.Navigation("UserSkill");
                });

            modelBuilder.Entity("Freelancing.Models.Entities.ChatRoom", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("Freelancing.Models.Entities.Contract", b =>
                {
                    b.Navigation("AuditLogs");

                    b.Navigation("Revisions");
                });

            modelBuilder.Entity("Freelancing.Models.Entities.ContractTermination", b =>
                {
                    b.Navigation("AuditLogs");
                });

            modelBuilder.Entity("Freelancing.Models.Entities.Project", b =>
                {
                    b.Navigation("Biddings");

                    b.Navigation("Contract");

                    b.Navigation("ProjectSkills");
                });

            modelBuilder.Entity("Freelancing.Models.Entities.UserAccount", b =>
                {
                    b.Navigation("Biddings");

                    b.Navigation("Mentorship");

                    b.Navigation("Projects");

                    b.Navigation("UserAccountSkills");
                });
#pragma warning restore 612, 618
        }
    }
}
